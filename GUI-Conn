//connector
package application;

import java.sql.*;
import java.util.ArrayList;

public class FermiConnector {
	
	private final String DB_URL = "jdbc:mysql://127.0.0.1:3306/fermi_base";
	private ArrayList<FermiEntry> data = new ArrayList<>(); 
	
	public FermiConnector() {
		try {
			Connection conn = DriverManager.getConnection(DB_URL, "root", "Redrobot!6");
			Statement stmt = conn.createStatement();
			ResultSet result = stmt.executeQuery("SELECT * FROM hours_offered");
			
			while(result.next()) {
				data.add(new FermiEntry(result.getString(1), result.getString(2), result.getDouble(3),
						result.getInt(4), result.getBoolean(5)));
			}
			
			conn.close();
		} catch (Exception ex) {
			System.out.println("ERROR: " + ex.getMessage());
		}
	}
	
	public ArrayList<FermiEntry> getData() {
		return data;
	}
}

//table
package application;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.collections.FXCollections;


public class Main extends Application {
	private FermiConnector base = new FermiConnector();
	
	@Override
	public void start(Stage Stage) {
		BorderPane root = new BorderPane();
		
		TableView<FermiEntry> dataTable = createTable();
		
		root.setCenter(dataTable);
		
		Scene scene = new Scene(root, 600, 400);
		//scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		Stage.setScene(scene);
		Stage.setTitle("Data Table");
		Stage.show();
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	@SuppressWarnings("unchecked")
	private TableView<FermiEntry> createTable() {
		
		TableView<FermiEntry> table = new TableView<>();
		table.setItems(FXCollections.observableArrayList(base.getData()));
		
		TableColumn<FermiEntry, String> nameCol = new TableColumn<>("Name");
		nameCol.setMinWidth(50);
		nameCol.setCellValueFactory(new PropertyValueFactory<FermiEntry, String>("name"));
		
		TableColumn<FermiEntry, String> phoneCol = new TableColumn<>("Phone Number");
		phoneCol.setMinWidth(100);
		phoneCol.setCellValueFactory(new PropertyValueFactory<FermiEntry, String>("phone"));
		
		TableColumn<FermiEntry, Double> overCol = new TableColumn<>("Overtime Offered(hrs.)");
		overCol.setMinWidth(140);
		overCol.setCellValueFactory(new PropertyValueFactory<FermiEntry, Double>("overtime"));
		overCol.setSortType(TableColumn.SortType.DESCENDING);
		
		TableColumn<FermiEntry, Integer> senCol = new TableColumn<>("Intradep. Seniority");
		senCol.setMinWidth(120);
		senCol.setCellValueFactory(new PropertyValueFactory<FermiEntry, Integer>("seniority"));
		
		TableColumn<FermiEntry, Boolean> bisonCol = new TableColumn<>("In Bison Feeding Program");
		bisonCol.setMinWidth(170);
		bisonCol.setCellValueFactory(new PropertyValueFactory<FermiEntry, Boolean>("inBison"));
		
		table.getColumns().addAll(nameCol, phoneCol, overCol, senCol, bisonCol);
		return table;
	}
}

//helper class
package application;

public class FermiEntry {
	private String name, phone;
	private double overtime;
	private int seniority;
	private boolean inBison;
	
	public FermiEntry(String name, String phone, double overtime, int seniority, boolean inBison) {
		this.name = name;
		this.phone = phone;
		this.overtime = overtime;
		this.seniority = seniority;
		this.inBison = inBison;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public double getOvertime() {
		return overtime;
	}

	public void setOvertime(double overtime) {
		this.overtime = overtime;
	}

	public int getSeniority() {
		return seniority;
	}

	public void setSeniority(int seniority) {
		this.seniority = seniority;
	}

	public boolean isInBison() {
		return inBison;
	}

	public void setInBison(boolean inBison) {
		this.inBison = inBison;
	}
}
